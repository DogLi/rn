use clap;
use clap::{App, Arg, SubCommand};

pub fn get_args() -> clap::ArgMatches<'static> {
    clap::App::new("rn")
        //.setting(clap::AppSettings::SubcommandRequiredElseHelp)
        .version(crate_version!())
        .author(crate_authors!())
        .about("a realtime file transformer.")
        .arg(clap::Arg::with_name("project")
                 .short("p")
                 .long("project")
                 .value_name("PROJECT")
                 .takes_value(true)
                 .default_value("default")
                 .help("set the project name to be deployed!"))
        .arg(clap::Arg::with_name("server")
                 .required(true)
                 .index(1)
                 .help("set the remote server name which comes from .ssh/config or inner rule."))
        .arg(clap::Arg::with_name("config")
                 .short("c")
                 .long("config")
                 .value_name("CONFIG")
                 .takes_value(true)
                 .default_value("settings.toml")
                 .help("Config for rn's variables."))
        .arg(clap::Arg::with_name("verbose")
                 .short("v")
                 .long("verbose")
                 .multiple(true)
                 .help("Print information about what's being done. Repeat for more information."))
        .arg(clap::Arg::with_name("watch")
                 .short("w")
                 .long("watch")
                 .help("watch for file change!"))
        .get_matches()
}

pub fn get_args2() -> clap::ArgMatches<'static> {
    App::new("My Super Program")
        //.setting(clap::AppSettings::SubcommandRequiredElseHelp)
        .version(crate_version!())
        .author(crate_authors!())
        .about("a realtime file transformer.")
        .arg(Arg::with_name("config")
            .short("c")
            .long("config")
            .value_name("FILE")
            .help("Sets a custom config file")
            .takes_value(true))
        .arg(clap::Arg::with_name("project")
            .short("p")
            .long("project")
            .value_name("PROJECT")
            .takes_value(true)
            .default_value("default")
            .help("set the project name to be deployed!"))
        .arg(Arg::with_name("v")
            .short("v")
            .multiple(true)
            .help("Sets the level of verbosity"))
        .arg(clap::Arg::with_name("watch")
            .short("w")
            .long("watch")
            .help("watch for file change!"))
        .get_matches()
}
